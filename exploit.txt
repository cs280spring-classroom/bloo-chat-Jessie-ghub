A DOM-based XSS is possible because an adversary-controlled inputs affect the sensitive function
 innerHTML. We used innerHTML multiple times in chatroom.njk when adding messages to the chat.

If an adversary crafts an input like "<img src="12" onerror= 'alert(1);'/>", since 
'12' is an invalid source, it becomes an error. javascript will execute whatever arbitrary scripts 
the user set for onerror, in this case it's alert(1);.

To fix the vulnerability, we can replace 'innerHTML' with 'innerText', which is a safer alternative
 and works just fine because our messages are all texts.